# This file is automatically generated. Do not modify!
cmake_minimum_required(VERSION 3.10)
project({{ vendor_name }})

# Project-specific settings
set(LIB_VER_MAJOR {{ version.major }})
set(LIB_VER_MINOR {{ version.minor }})
set(LIB_VER_PATCH {{ version.patch }})
set(LIB_VER_SUFFIX "{{ version_suffix }}")

# Derived variables
set(LIB_NAME {{ cmake_pkg_name }})
set(GITHUB_NAME {{ github_pkg_name }})
string(REPLACE "-" "_" LIB_NAME_UNDERSCORE ${LIB_NAME})
set(LIB_NAME_COMP_PREFIX ${LIB_NAME})
set(LIB_NAME_FULL ${LIB_NAME})
set(LIB_VER ${LIB_VER_MAJOR}.${LIB_VER_MINOR}.${LIB_VER_PATCH})

find_package(ament_cmake_core REQUIRED)
find_package(ament_cmake_vendor_package REQUIRED)
find_package(ament_cmake_export_dependencies REQUIRED)

{% for dep in gz_vendor_deps %}
find_package({{ dep }} REQUIRED)
{% endfor %}

{% if cmake_pkg_name == "gz-tools" %}
find_program(GZ_TOOLS_PROGRAM gz)
if(NOT GZ_TOOLS_PROGRAM)
  set(${LIB_NAME_FULL}_FOUND false)
else()
  set(${LIB_NAME_FULL}_FOUND true)
endif()
{% else %}
# Set the VERSION_MATCH to "EXACT" by default, but relax the requirement
# if we are users are building from source (determined by the
# GZ_BUILD_FROM_SOURCE environment variable) or if explicitly told to do so
# by the GZ_RELAX_VERSION_MATCH environment variable.
set(VERSION_MATCH "EXACT")
if(NOT $ENV{GZ_BUILD_FROM_SOURCE} STREQUAL "")
  set(VERSION_MATCH "")
endif()

if(NOT $ENV{GZ_RELAX_VERSION_MATCH} STREQUAL "")
  set(VERSION_MATCH "")
endif()

find_package(${LIB_NAME_FULL} ${VERSION_MATCH} ${LIB_VER} COMPONENTS all QUIET)
{% endif %}

ament_vendor(${LIB_NAME_UNDERSCORE}_vendor
  SATISFIED ${${LIB_NAME_FULL}_FOUND}
  VCS_URL https://github.com/gazebosim/${GITHUB_NAME}.git
  VCS_VERSION ${GITHUB_NAME}${LIB_VER_MAJOR}_${LIB_VER}${LIB_VER_SUFFIX}
{% if cmake_args %}
  CMAKE_ARGS
  {% for arg in cmake_args %}
    {{ arg }}
  {% endfor %}
{%- endif %}
  GLOBAL_HOOK
  {% if has_patches %}
  PATCHES patches
  {% endif %}
)

find_package(ament_cmake_test REQUIRED)
if(BUILD_TESTING)
  find_package(ament_cmake_lint_cmake REQUIRED)
  find_package(ament_cmake_copyright REQUIRED)
  find_package(ament_cmake_xmllint REQUIRED)

  ament_lint_cmake()
  ament_copyright()
  ament_xmllint()
endif()

{% if gz_vendor_deps | length > 0 %}
ament_export_dependencies(
{% for dep in gz_vendor_deps %}
  {{ dep }}
{% endfor %}
)
{% endif %}

{% if vendor_has_dsv %}
if(NOT ${${LIB_NAME_FULL}_FOUND})
  ament_environment_hooks("${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}.dsv.in")
  # Create a dummy .sh file needed for ament_package to source the .dsv file.
  # See https://github.com/ament/ament_package/issues/145
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.sh "# Dummy .sh file needed for .dsv file to be sourced.")
  ament_environment_hooks("${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.sh")
endif()
{% endif %}

ament_package()
